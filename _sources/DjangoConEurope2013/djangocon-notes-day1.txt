Django Circus Notes (Day 1)
===========================

Kopernik
--------

(@brandon\_rhodes ...)

change your perspective, change the centre of your universe

-  revolve around functional core, not around I/O - cf Gary Bernhardt
   "Boundaries", "The Clean Architecture", "Faux O" etc
-  docopt - revolve around the doc string for your cmd line options
-  django - revolve around business logic, not webserver logic

Circus
------

http://blog.ziade.org/slides/djangocon2012/circus.html

(mozilla guy, tarek, site http://circus.io/ )

typical set up - nginx, gunicorn, django, celery Supervision tools -
supervisord but missing features -> circus built on - psutil - nice lib
- zeromq, PyZMQ (inc event loop from tornado) - ... we can replace
gunicorn with circus, using http://chausette.readthedocs.org - circus
manages tcp socket binding, wsgi and django processes directly -
benchmark to faaster than gunicorn + gevent

Processing Payments
-------------------

Threats: - XSS - Phishing - SQL injection - remote execution - ourselves

OWASP - detection points - good checklist of things to think about

XSS - Content Security Policy - whitelist where js will be executed -
Moz DN docs navigator.mozPay -> web standards database, problem of
anonymising data -> second database encrypt some fields -
django-aesfield proxy manages credentials, solitude manages database,
provides API to Marketplace which manages transaction data proxy is SOAP
proxy that uses lxml to parse xml and insert credentials

don't use http request directly and then have to deal with HTTP in
business logic curling - wrapper around slumber

django-paranoia - allow everything to go through, but tell "security" -
ParanoidForm - check if extra form fields -> log - check if fewer form
fields -> log - check if form contains ascii character less than 32
(except ) - changes during session - user agent - ip address (can be
legit, eg mobile -> reverse geo ip look up)

The Imaginative Programmer
--------------------------

Zed Shaw

stories design education is broken (funny) rants about not being taken
seriously in one area because of something else he does (often
programming)

I propose we hack creativity and make it worthless

4 types no imagination, technique - stereotype of nerd programmer
imagination, no technique - biz dreamer no imagination, no technique -
doesn't exist imagination, technique - the goal

Process 1. imagine - problem, "itch" 2. establish a concept - some form
of constraint 3. research technologies and tools - do research or you'll
pay later 4. Regine the Concept Through Composition - mark what's in and
what's out 5. Explore through prototype - work on paper, throw away code
6. Make it Real

We are programmers, everything is recursize 'top down' v 'bottom up' is
really 'concept' v 'technique'

-  take a notebook with you (email ideas to yourself)
-  fear of failure is the biggest killer of new ideas
-  create a 'place' or a trigger that gives you permission to fail
-  beginning of critical thinking in composition, definite after
   prototype
-  talk to others about your ideas help, solitude best for dev ideas

Advanced PostgreSQL
-------------------

database agnosticim is expensive enjoy your database

custom types - many built in types - eg case insensitive text -> citext
- attributes you want to add occasionally (sparse) -> hstore (dict-like)
- do queries etc - json type - validated going in, more features coming
in 9.3 - UUID - good for index if merging in data from other sources -
ipv4 and ipv6 addresses - cidr comparisons - interval - store time
intervals directly in db - define your own types! and then have custom
indexes! - easy to integrate into Django - psycopg2, Field class,
formfield and widget

custom indexes - partial index - index subset of rows - eg most rows
archived, only index active rows -> smaller faster index - multicolumn
index - expression index - eg index on just year of date field

custom SQL -lso add python version check bootstrap\_requirements.py
customuse .sql inclusion mechanism -> requires each statement be on one
lien - use south

custom constraints - foreign key constraints implemented in ORM - push
constraints into DB where possible - blocks bad data ... - add
constraints with south - exclusion constraints - eg non-intersecting
time ranges and same room

raw SQL - joining more than three tables -> use raw SQL - don't fall
back into multiple query sets and iteration - django can still return
model objects - full text search, geometric searches - complex joins
that return a subset of lots of objects for view purposes - put SQL in
the manager or the model - stored procedures (added by south)

Recommendations
---------------

slides - http://aniav.github.io/circus

-> estimating ratings/preferences for items not seen by that user
collabarative recommendations - similar users content based
recommendations - similar content hybrid methods

Combine JS and Django
---------------------

use JS frameworks - app structure, testability, productivity

why not backbone? - lack of bindings - no reusable views - models are
poor

trying angular and ember instead, not sure which will win

requireJS gives - easy Coffeescript integration - modular code - builder
- uglifier

django-require gives coffeescript integration (similar to
django-pipeline) django-rest-framework good django-storages - static
files

Profiling
---------

https://speakerdeck.com/amjith/thread-profiling-in-python

cprofile is easy to use run snake run - visualise cprofile output but in
production, cprofile is too slow (100% overhead) in production, do
targeted profiling - pick particular functions New Relic do this for
django, flask, bottle - view handlers, sql calls - but can end up with
"Application code" being it all

statistical profiler interrupt -> inquire -> collate interrupt - see
what function is being run when you interrupt inquire - get stack trace
collate - store and then generate reports

INTERRUPT by unix signals OR background thread

unix socket + v accurate - unix only - ignored in mod\_wsgi - can't
interrupt C extensions

threads + cross platform + mod\_wsgi compatible - inaccurate for CPU
heavy tasks - can't interrupt C extension

\*\* talk - how the GIL works in python by ???

COLLATE

dictionary - key is tuple of file, line no, function - no context call
tree - preserve context

existing tools - statprof - signals, cli - PLOP - signals, D3 call graph
- New Relic - threads, GUI

Migrating the Future
--------------------

Andrew Godwin, South, andrew@aeracode.org (slides have lots of good
diagrams) - http://speakerdeck.com/andrewgodwin/migrating-the-future
https://github.com/andrewgodwin/django/tree/schema-alteration/ blog
aeracode.org/category/django-diaries/

Why replace south? - 5 years of learning - poor vcs branching, and
merging - huge migration file size - migrations sets get too large

south -> - django.db.migrations - migration commands etc -
django.db.backends.schema - SQL generation, db abstraction

Changes: - new migration format - declarative - so work out state from
previous migrations - dependencies - so if two migrations are created on
parallel branches, it still works - dependencies explicitly stated in
files - create merge migration, or ask - squashing (of many old
migrations) - complications with dependencies between apps

Field API changes coming up - might be backwards incompatible ...

Having your pony and committing it too
--------------------------------------

Jacob Burch Basically, getting commits accepted into core django

'Max Weber describes politics as "the slow boring of hard boards". Open
Source is the same.'

passion and perspective be on top of things and be patient confident and
humble

First: - fork https://github.com/django/django/ - git clone -
./runtests.py --settings=test\_sqlite - Do not pass GO until tests run

bug fix: - start with a test case - very important - test against
regressions - not necessarily free from discussion

major contributions (and tbh, minor additions) - search trac - search
django-developers - become familiar with the code in the area you're
changing

proposing a change - be humble - expect it to take a while - respect the
coding style - have tests

Review - your ego is *not* on the line - humility - no really - you are
not your code - patience - pro-active - send polite, friendly follow up
messages often

Lightning Talks
---------------

geek girls carrots
~~~~~~~~~~~~~~~~~~

11 cities, 4 special meetings, 1 sprint, 5 kinds of workshops using
facebook promote women in new tech educate women in programming etc
workshop - 10 mentors, 23 participants competitions why django -
community in Warsaw

Don't be afraid to commit
~~~~~~~~~~~~~~~~~~~~~~~~~

dont-be-afraid-to-commit.rtfd.com

People have great ideas but often don't work efficiently, lack expertise
and/or confidence workspace set up -> virtualenv code -> version control
"needs test and docs" -> learn confidence -> having a way in

so come to workshop at start of the sprints - 11am Saturday

Elasticsearch
~~~~~~~~~~~~~

full text search, optional structured faceting percolator - akin to a
trigger, if document added matches stored query, trigger action

stop writing settings files
~~~~~~~~~~~~~~~~~~~~~~~~~~~

@brutasse https://speakerdeck.com/brutasse/stop-writing-settings-files

local\_settings - can be limiting multiple settings file import from
base\_settings.py (or settings/base.py) and use
``./manage.py --settings=settings/staging.py`` 12factor.net - no
settings in code derive settings from environment variables - 13
settings daemontools envdir - help manage env variables in development
environment - files in version control with env settings envdir in your
manage.py also possible

Teaching 2.0
~~~~~~~~~~~~

now - pdf next - use github, text etc in .rst files - students have
added pull requests

big idea - see students as partners in collaborative engagement -
learning from each other - like open source!

Configuring Python environments with Puppet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

test pycharm on different environments
https://github.com/traff/python.pp
